SSH into cluster (make sure port 22 is open to all traffic)

Run on command line:

wget https://an-utd-course.s3-us-west-1.amazonaws.com/business.csv
wget https://an-utd-course.s3-us-west-1.amazonaws.com/review.csv
wget https://an-utd-course.s3-us-west-1.amazonaws.com/user.csv



beeline
!connect jdbc:hive2://localhost:10000 hdfs hdfs


Run on Hive CLI:
CREATE TABLE business (businessid STRING,  fullAddress STRING, categories STRING)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '^';

CREATE TABLE review (reviewid STRING, userid STRING, businessid STRING, stars FLOAT)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '^';

CREATE TABLE users (userid STRING, name STRING, url STRING) ROW FORMAT DELIMITED FIELDS TERMINATED BY '^';

LOAD DATA LOCAL INPATH '/home/hadoop/business.csv' OVERWRITE INTO TABLE business;
LOAD DATA LOCAL INPATH '/home/hadoop/review.csv' OVERWRITE INTO TABLE review;
LOAD DATA LOCAL  INPATH '/home/hadoop/user.csv' OVERWRITE INTO TABLE users;



1. List the 'userid' and 'stars' of users that reviewed businesses located in La Jolla, CA. 

select r.userid, r.stars from review r inner join business b on r.businessid = b.businessid where b.fulladdress like '%La Jolla, CA%';
select name, stars from business b inner join review r on b.businessid = r.businessid inner join users u on r.userid = u.userid where b.fulladdress like '%La Jolla, CA%';

2. List businessid and average stars of businesses that are located in La Jolla, CA.

select b.businessid, AVG(r.stars) as avgStars from review r inner join business b on r.businessid = b.businessid where b.fullAddress like '%La Jolla, CA%' GROUP BY b.businessid; 

3. List the businessid , full address and categories of the Top 10 highest rated businesses using the average ratings. 

select b.businessid, b.fulladdress, b.categories from business b INNER JOIN (
select b.businessid, AVG(r.stars) as avgStars from review r inner join business b on r.businessid = b.businessid GROUP BY b.businessid ORDER BY avgStars DESC LIMIT 10) AS i ON b.businessid = i.businessid;

4. List the userid, name, and number of reviews of the top 8th user who has written the most reviews. 

select i.userid, i.cntReview, u.name from (select r.userid as userid, count(r.reviewid) as cntReview from review r group by r.userid order by cntReview desc limit 8) as i inner join users u on i.userid = u.userid order by i.cntReview limit 1;

5. Find out the userid of users who have not written any reviews.

select u.userid from users u left outer join review r on u.userid = r.reviewid where r.reviewid IS NULL;

6. 	List the businessid, and count of each	business's ratings for the businesses that are located in the state	of TX. The data should be sorted by the count of ratings in a descending way.

select b.businessid, count(r.reviewid) as cntReview from business b inner join review r on b.businessid = r.businessid where fulladdress like '%TX%' GROUP BY b.businessid ORDER BY cntReview DESC;


For the next questions, download the movielens dataset from: http://files.grouplens.org/datasets/movielens/ml-100k.zip
Note that the files are tab separated. The list of fields is available in the README file: http://files.grouplens.org/datasets/movielens/ml-100k-README.txt
You should be able to answer the queries below using the following tables:
u.data, u.user, and u.item.
Note that item id and movie id are used interchangeably.

Run on command line:
wget http://files.grouplens.org/datasets/movielens/ml-100k.zip
unzip ml-100k.zip

CLI commands:
CREATE TABLE rating (userid STRING,  itemid STRING, rating FLOAT, timestamp STRING)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t';

LOAD DATA LOCAL INPATH 'ml-100k/u.data' OVERWRITE INTO TABLE rating;


CREATE TABLE item (movieid STRING,  movie STRING, releaseDate STRING,  videoReleaseDate STRING,
              IMDbURL STRING, unknown INT, Action INT, Adventure INT,  Animation INT,
              Childrens INT, Comedy INT, Crime INT, Documentary INT, Drama INT, Fantasy INT,
              FilmNoir INT, Horror INT, Musical INT, Mystery INT, Romance INT, SciFi INT,
              Thriller INT, War INT, Western INT)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '|';

LOAD DATA LOCAL INPATH 'ml-100k/u.item' OVERWRITE INTO TABLE item;


CREATE TABLE movieusers (userid STRING,  age STRING, gener STRING, occupation STRING, zipcode STRING )
ROW FORMAT DELIMITED FIELDS TERMINATED BY '|';

LOAD DATA LOCAL INPATH 'ml-100k/u.user' OVERWRITE INTO TABLE movieusers;


7. Find the age, gender, and occupation of the user that has written the most reviews. If there is a tie, you can randomly select any.

8. Create a list of occupations and the number of reviews written by them sorted by the count of reviews in descending order.
Example:

Student	200000
Programmer	18000
....


9. Using the u.item table, find the total number of movies of each category i.e. something like:
TotalOfAdventure TotalOfComedy	....


10. From the user table, find the number and average age of those with occupation of "scientist"